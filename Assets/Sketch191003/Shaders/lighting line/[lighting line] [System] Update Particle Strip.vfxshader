//[lighting line] [System] Update Particle Strip,1
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 metal vulkan xboxone xboxone xboxseries playstation ps5


#pragma enable_d3d11_debug_symbols

#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_MASS_CURRENT 1
#define VFX_USE_EVENTCOUNT_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define VFX_USE_POSITION_SOURCE 1
#define STRIP_COUNT 3000u
#define PARTICLE_PER_STRIP_COUNT 1200u
#define RAW_CAPACITY 3600000u
#define HAS_STRIPS 1
#define VFX_LOCAL_SPACE 1
#include_with_pragmas "Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_FIXED_SIZE 3600000
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1



struct GraphValues
{
    bool _vfx_enabled_f;
    float4x4 InvFieldTransform_a;
    float4x4 FieldTransform_a;
    float4 uniform_i;
    float Drag_a;
    float frequency_a;
    int octaves_a;
    float roughness_a;
    float lacunarity_a;
    float deltaTime_a;
    bool _vfx_enabled_g;
    float3 uniform_j;
    float uniform_k;
    float uniform_l;
    bool _vfx_enabled_h;
    bool _vfx_enabled_i;
    float3 Velocity_a;
    float Drag_b;
    bool _vfx_enabled_j;
    float4x4 uniform_m;
    bool _vfx_enabled_k;
    bool _vfx_enabled_l;
    bool _vfx_enabled_m;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    bool alive;
    float3 position;
    float lifetime;
    float3 velocity;
    float mass;
    uint eventCount;
    float age;
};

struct VFXSourceAttributes
{
    float3 position;
};

RWStructuredBuffer<uint> eventListOut_a;



#define IndirectOutputType uint

























// Strips tangent computation
















#ifdef VFX_IS_RAYTRACED
#pragma multi_compile _ VFX_COMPUTE_AABBS
#endif

#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

RWByteAddressBuffer attributeBuffer;

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadList;
#endif

#if VFX_HAS_INDIRECT_DRAW
RWStructuredBuffer<uint> indirectBuffer;
#endif

#if HAS_STRIPS_DATA
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#if VFX_USE_STRIPALIVE_CURRENT
StructuredBuffer<uint> attachedStripDataBuffer;
#endif

CBUFFER_START(updateParamsConst)
    uint dispatchWidth;
    
    float4 instancingConstants;
    uint2 instancingBufferOffsets;
    
    float3 cameraXRSettings;
CBUFFER_END

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"



#if VFX_HAS_INDIRECT_DRAW

void AppendOutputBuffer(RWStructuredBuffer<IndirectOutputType> outputBuffer, IndirectOutputType output, uint instanceActiveIndex, uint increment = 1)
{
    uint indirectIndex;

#if VFX_FEATURE_SORT
    InterlockedAdd(outputBuffer[instanceActiveIndex].index, increment, indirectIndex);
#else
    InterlockedAdd(outputBuffer[instanceActiveIndex], increment, indirectIndex);
#endif
    indirectIndex /= increment;
    indirectIndex += instancingBatchSize + instanceActiveIndex * RAW_CAPACITY;
    outputBuffer[indirectIndex] = output;
}

#endif

void Turbulence_18D(float3 position, inout float3 velocity, float mass, float4x4 InvFieldTransform, float4x4 FieldTransform, float Intensity, float Drag, float frequency, int octaves, float roughness, float lacunarity, float deltaTime) /*Mode:Relative NoiseType:Value */
{
    float3 vectorFieldCoord = mul(InvFieldTransform, float4(position,1.0f)).xyz;
    
    float3 value = GenerateValueCurlNoise(vectorFieldCoord + 0.5f, frequency, octaves, roughness, lacunarity);
    value = mul(FieldTransform,float4(value,0.0f)).xyz * Intensity;
    
    velocity += (value - velocity) * min(1.0f,Drag * deltaTime / mass);
}
void SetAttribute_E89EAA93(inout float lifetime, float _Lifetime) /*channels:XYZ */
{
    lifetime *= _Lifetime;
}
void TriggerEvent_4A6(inout uint eventCount, float age, bool alive, float lifetime, uint count, float deltaTime) /*mode:OnDie */
{
    eventCount = (age + deltaTime > lifetime || !alive) ? count : 0;
}
void Force_1(inout float3 velocity, float mass, float3 Velocity, float Drag, float deltaTime) /*Mode:Relative */
{
    velocity += (Velocity - velocity) * min(1.0f,Drag * deltaTime / mass);
}
void SetAttribute_CAC29747(inout float3 position, float3 _Position) /*channels:XYZ */
{
    position = _Position;
}
void EulerIntegration(inout float3 position, float3 velocity, float deltaTime)
{
    position += velocity * deltaTime;
}
void Age(inout float age, float deltaTime)
{
    age += deltaTime;
}
void Reap(float age, float lifetime, inout bool alive)
{
    if(age > lifetime) { alive = false; }
}





[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
	uint id = GetThreadId(groupId, groupThreadId, dispatchWidth);

	
	uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
	#if defined(VFX_INSTANCING_FIXED_SIZE)
		uint index = GetThreadId(groupId, 0, dispatchWidth);
		index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
		index += groupThreadId.x;
	#else
		uint index = VFXInitInstancing(id, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
	#endif
	
	

	struct ContextData
	{
	    uint maxParticleCount;
	    uint systemSeed;
	    uint initSpawnIndex;
	};
	ContextData contextData;
	uint4 rawContextData = graphValuesBuffer.Load4(instanceActiveIndex * 640);
	contextData.maxParticleCount = rawContextData.x;
	contextData.systemSeed = rawContextData.y;
	contextData.initSpawnIndex = rawContextData.z;
	

	uint systemSeed = contextData.systemSeed;
	uint nbMax = contextData.maxParticleCount;

#if VFX_COMPUTE_BOUNDS
	uint tid = groupThreadId.x;
#endif

	if (index < nbMax)
	{
#if HAS_STRIPS
		if (index == 0)
		{
			STRIP_PARTICLE_COUNTER(instanceIndex) = 0;
		}
#endif

		GraphValues graphValues;
		
		graphValues.InvFieldTransform_a._m00_m10_m20_m30 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 80));
		graphValues.InvFieldTransform_a._m01_m11_m21_m31 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 96));
		graphValues.InvFieldTransform_a._m02_m12_m22_m32 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 112));
		graphValues.InvFieldTransform_a._m03_m13_m23_m33 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 128));
		graphValues.FieldTransform_a._m00_m10_m20_m30 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 144));
		graphValues.FieldTransform_a._m01_m11_m21_m31 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 160));
		graphValues.FieldTransform_a._m02_m12_m22_m32 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 176));
		graphValues.FieldTransform_a._m03_m13_m23_m33 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 192));
		graphValues.uniform_m._m00_m10_m20_m30 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 208));
		graphValues.uniform_m._m01_m11_m21_m31 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 224));
		graphValues.uniform_m._m02_m12_m22_m32 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 240));
		graphValues.uniform_m._m03_m13_m23_m33 = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 256));
		graphValues.uniform_i = asfloat(graphValuesBuffer.Load4(instanceActiveIndex * 640  + 336));
		graphValues.uniform_j = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 640  + 416));
		graphValues.Velocity_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 640  + 432));
		graphValues._vfx_enabled_f = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 504);
		graphValues.Drag_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 508));
		graphValues.frequency_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 512));
		graphValues.octaves_a = asint(graphValuesBuffer.Load(instanceActiveIndex * 640  + 516));
		graphValues.roughness_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 520));
		graphValues.lacunarity_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 524));
		graphValues.deltaTime_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 528));
		graphValues._vfx_enabled_g = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 532);
		graphValues.uniform_k = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 536));
		graphValues.uniform_l = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 540));
		graphValues._vfx_enabled_h = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 544);
		graphValues._vfx_enabled_i = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 548);
		graphValues.Drag_b = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 640  + 552));
		graphValues._vfx_enabled_j = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 556);
		graphValues._vfx_enabled_k = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 560);
		graphValues._vfx_enabled_l = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 564);
		graphValues._vfx_enabled_m = (bool)graphValuesBuffer.Load(instanceActiveIndex * 640  + 568);
		


		VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

#if VFX_USE_ALIVE_CURRENT
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x3)) << 2));
		

		if (attributes.alive)
		{
			attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA00)) << 2));
			attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA03)) << 2));
			attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x0)) << 2));
			attributes.mass = (float)1;
			attributes.eventCount = (uint)0;
			uint eventCount_a = 0u; uint eventCount_a_Capacity = 200000;
			attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA04)) << 2));
			sourceAttributes.position = attributes.position;
			

#if VFX_USE_OLDVELOCITY_CURRENT && VFX_USE_VELOCITY_CURRENT
			attributes.oldVelocity = attributes.velocity;
#endif
#if HAS_STRIPS
			const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
			InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
			
			if (deltaTime != 0.0f)
#endif
			{
				if (graphValues._vfx_enabled_f)
				{
				    float tmp_bt = attributes.age / attributes.lifetime;
				    float tmp_bu = SampleCurve(graphValues.uniform_i,tmp_bt);
				    Turbulence_18D(attributes.position,  /*inout */attributes.velocity, attributes.mass, graphValues.InvFieldTransform_a, graphValues.FieldTransform_a, tmp_bu, graphValues.Drag_a, graphValues.frequency_a, graphValues.octaves_a, graphValues.roughness_a, graphValues.lacunarity_a, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_g)
				{
				    float3 tmp_bt = attributes.position - graphValues.uniform_j;
				    float3 tmp_bu = tmp_bt * tmp_bt;
				    float tmp_bv = tmp_bu[2];
				    float tmp_bw = tmp_bu[1];
				    float tmp_bx = tmp_bv + tmp_bw;
				    float tmp_by = tmp_bu[0];
				    float tmp_bz = tmp_bx + tmp_by;
				    float tmp_cb = pow(tmp_bz, (float)0.5);
				    float tmp_cc = tmp_cb - graphValues.uniform_k;
				    float tmp_cd = tmp_cc - graphValues.uniform_l;
				    float tmp_ce = ceil(tmp_cd);
				    float tmp_cf = saturate(tmp_ce);
				    SetAttribute_E89EAA93( /*inout */attributes.lifetime, tmp_cf);
				}
				if (graphValues._vfx_enabled_h)
				{
				    float3 tmp_bu = attributes.position - graphValues.uniform_j;
				    float3 tmp_bv = tmp_bu * tmp_bu;
				    float tmp_bw = tmp_bv[2];
				    float tmp_bx = tmp_bv[1];
				    float tmp_by = tmp_bw + tmp_bx;
				    float tmp_bz = tmp_bv[0];
				    float tmp_ca = tmp_by + tmp_bz;
				    float tmp_cc = pow(tmp_ca, (float)0.5);
				    float tmp_cd = tmp_cc - graphValues.uniform_k;
				    float tmp_ce = tmp_cd - graphValues.uniform_l;
				    float tmp_cf = ceil(tmp_ce);
				    float tmp_cg = saturate(tmp_cf);
				    float tmp_ch = (float)1 - tmp_cg;
				    uint tmp_ci = (uint)tmp_ch;
				    attributes.eventCount = 0u;
				    TriggerEvent_4A6( /*inout */attributes.eventCount, attributes.age, attributes.alive, attributes.lifetime, tmp_ci, graphValues.deltaTime_a);
				    eventCount_a += attributes.eventCount;
				}
				if (graphValues._vfx_enabled_i)
				{
				    Force_1( /*inout */attributes.velocity, attributes.mass, graphValues.Velocity_a, graphValues.Drag_b, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_j)
				{
				    float3 tmp_bt = sourceAttributes.position;
				    float3 tmp_bu = mul(graphValues.uniform_m, float4(tmp_bt, 1.0)).xyz;
				    SetAttribute_CAC29747( /*inout */attributes.position, tmp_bu);
				}
				if (graphValues._vfx_enabled_k)
				{
				    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_l)
				{
				    Age( /*inout */attributes.age, graphValues.deltaTime_a);
				}
				if (graphValues._vfx_enabled_m)
				{
				    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
				}
				

			}

			attributeBuffer.Store3(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA00)) << 2,asuint(attributes.position));
			attributeBuffer.Store(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA03)) << 2,asuint(attributes.lifetime));
			attributeBuffer.Store3(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x0)) << 2,asuint(attributes.velocity));
			attributeBuffer.Store(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA04)) << 2,asuint(attributes.age));
			
			for (uint i_a = 0; i_a < min(eventCount_a, eventCount_a_Capacity); ++i_a)
			    AppendEventBuffer(eventListOut_a, index, eventCount_a_Capacity, instanceIndex);
			AppendEventTotalCount(eventListOut_a, min(eventCount_a, eventCount_a_Capacity), instanceIndex);
			
			

			if (attributes.alive)
			{

#if VFX_HAS_INDIRECT_DRAW
                AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif

#if HAS_STRIPS
				uint bufferIndex = STRIP_DATA_INDEX(instanceIndex, stripData.stripIndex);
				uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
				InterlockedMin(STRIP_DATA(STRIP_MIN_ALIVE, bufferIndex), relativeIndexInStrip);
				InterlockedMax(STRIP_DATA(STRIP_MAX_ALIVE, bufferIndex), relativeIndexInStrip);
#endif
			}
			else
			{
				attributeBuffer.Store(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x3)) << 2,uint(attributes.alive));
				

#if USE_DEAD_LIST && !VFX_USE_STRIPALIVE_CURRENT
	            uint deadIndex;
		        InterlockedAdd(deadList[instanceIndex], 1, deadIndex);
				deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
				deadList[deadIndex] = index;
#endif
			}
		}
#if USE_DEAD_LIST && VFX_USE_STRIPALIVE_CURRENT
        else if (attributes.stripAlive)
        {
            if (STRIP_DATA_X(attachedStripDataBuffer, STRIP_MIN_ALIVE, index) == ~1) // Attached strip is no longer alive, recycle the particle
            {
	            uint deadIndex;
		        InterlockedAdd(deadList[instanceIndex], 1, deadIndex);
				deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
				deadList[deadIndex] = index;
                attributes.stripAlive = false;
                
            }
        }
#endif

// For strips, we still need to render some dead particles if they are in the middle of the strip
#if HAS_STRIPS && VFX_HAS_INDIRECT_DRAW
		if (!attributes.alive)
		{
			const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
			uint relativeIndexInStrip = GetRelativeIndex(index, stripData);
			if (relativeIndexInStrip > 0 && relativeIndexInStrip < stripData.nextIndex - 1)
			{
				AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
			}
		}
#endif

#else
		attributes.alive = (attributeBuffer.Load(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x3)) << 2));
		attributes.position = asfloat(attributeBuffer.Load3(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA00)) << 2));
		attributes.lifetime = asfloat(attributeBuffer.Load(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA03)) << 2));
		attributes.velocity = asfloat(attributeBuffer.Load3(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x0)) << 2));
		attributes.mass = (float)1;
		attributes.eventCount = (uint)0;
		uint eventCount_a = 0u; uint eventCount_a_Capacity = 200000;
		attributes.age = asfloat(attributeBuffer.Load(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA04)) << 2));
		sourceAttributes.position = attributes.position;
		

#if VFX_USE_OLDVELOCITY_CURRENT && VFX_USE_VELOCITY_CURRENT
		attributes.oldVelocity = attributes.velocity;
#endif
#if VFX_USE_CONTINUOUSCOLLISIONCOUNT_CURRENT
		//attributes.continuousCollisionCount = 0;
#endif
#if HAS_STRIPS
        const StripData stripData = GetStripDataFromParticleIndex(index, instanceIndex);
        InitStripAttributes(index, attributes, stripData);
#endif

#if VFX_UPDATE_SKIP_ZERO_DELTA_TIME
		
		if (deltaTime != 0.0f)
#endif
		{
			if (graphValues._vfx_enabled_f)
			{
			    float tmp_bt = attributes.age / attributes.lifetime;
			    float tmp_bu = SampleCurve(graphValues.uniform_i,tmp_bt);
			    Turbulence_18D(attributes.position,  /*inout */attributes.velocity, attributes.mass, graphValues.InvFieldTransform_a, graphValues.FieldTransform_a, tmp_bu, graphValues.Drag_a, graphValues.frequency_a, graphValues.octaves_a, graphValues.roughness_a, graphValues.lacunarity_a, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_g)
			{
			    float3 tmp_bt = attributes.position - graphValues.uniform_j;
			    float3 tmp_bu = tmp_bt * tmp_bt;
			    float tmp_bv = tmp_bu[2];
			    float tmp_bw = tmp_bu[1];
			    float tmp_bx = tmp_bv + tmp_bw;
			    float tmp_by = tmp_bu[0];
			    float tmp_bz = tmp_bx + tmp_by;
			    float tmp_cb = pow(tmp_bz, (float)0.5);
			    float tmp_cc = tmp_cb - graphValues.uniform_k;
			    float tmp_cd = tmp_cc - graphValues.uniform_l;
			    float tmp_ce = ceil(tmp_cd);
			    float tmp_cf = saturate(tmp_ce);
			    SetAttribute_E89EAA93( /*inout */attributes.lifetime, tmp_cf);
			}
			if (graphValues._vfx_enabled_h)
			{
			    float3 tmp_bu = attributes.position - graphValues.uniform_j;
			    float3 tmp_bv = tmp_bu * tmp_bu;
			    float tmp_bw = tmp_bv[2];
			    float tmp_bx = tmp_bv[1];
			    float tmp_by = tmp_bw + tmp_bx;
			    float tmp_bz = tmp_bv[0];
			    float tmp_ca = tmp_by + tmp_bz;
			    float tmp_cc = pow(tmp_ca, (float)0.5);
			    float tmp_cd = tmp_cc - graphValues.uniform_k;
			    float tmp_ce = tmp_cd - graphValues.uniform_l;
			    float tmp_cf = ceil(tmp_ce);
			    float tmp_cg = saturate(tmp_cf);
			    float tmp_ch = (float)1 - tmp_cg;
			    uint tmp_ci = (uint)tmp_ch;
			    attributes.eventCount = 0u;
			    TriggerEvent_4A6( /*inout */attributes.eventCount, attributes.age, attributes.alive, attributes.lifetime, tmp_ci, graphValues.deltaTime_a);
			    eventCount_a += attributes.eventCount;
			}
			if (graphValues._vfx_enabled_i)
			{
			    Force_1( /*inout */attributes.velocity, attributes.mass, graphValues.Velocity_a, graphValues.Drag_b, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_j)
			{
			    float3 tmp_bt = sourceAttributes.position;
			    float3 tmp_bu = mul(graphValues.uniform_m, float4(tmp_bt, 1.0)).xyz;
			    SetAttribute_CAC29747( /*inout */attributes.position, tmp_bu);
			}
			if (graphValues._vfx_enabled_k)
			{
			    EulerIntegration( /*inout */attributes.position, attributes.velocity, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_l)
			{
			    Age( /*inout */attributes.age, graphValues.deltaTime_a);
			}
			if (graphValues._vfx_enabled_m)
			{
			    Reap(attributes.age, attributes.lifetime,  /*inout */attributes.alive);
			}
			

		}
		attributeBuffer.Store(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x3)) << 2,uint(attributes.alive));
		attributeBuffer.Store3(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA00)) << 2,asuint(attributes.position));
		attributeBuffer.Store(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA03)) << 2,asuint(attributes.lifetime));
		attributeBuffer.Store3(((instanceIndex * 0x2CA1C80) + (index * 0x4 + 0x0)) << 2,asuint(attributes.velocity));
		attributeBuffer.Store(((instanceIndex * 0x2CA1C80) + (index * 0x8 + 0xDBBA04)) << 2,asuint(attributes.age));
		
		for (uint i_a = 0; i_a < min(eventCount_a, eventCount_a_Capacity); ++i_a)
		    AppendEventBuffer(eventListOut_a, index, eventCount_a_Capacity, instanceIndex);
		AppendEventTotalCount(eventListOut_a, min(eventCount_a, eventCount_a_Capacity), instanceIndex);
		
		

#if VFX_HAS_INDIRECT_DRAW
        AppendOutputBuffer(indirectBuffer, index, instanceActiveIndex);
#endif
#endif
#if VFX_COMPUTE_BOUNDS || VFX_COMPUTE_AABBS
    {
    #if VFX_COMPUTE_BOUNDS
        
        float3 size3 = float3(attributes.size,attributes.size,attributes.size);
        #if VFX_USE_SCALEX_CURRENT
        size3.x *= attributes.scaleX;
        #endif
        #if VFX_USE_SCALEY_CURRENT
        size3.y *= attributes.scaleY;
        #endif
        #if VFX_USE_SCALEZ_CURRENT
        size3.z *= attributes.scaleZ;
        #endif
        
        #if VFX_WORLD_SPACE
            
        #else
            float4x4 worldToLocal = (float4x4)0;
        #endif
		InitReduction(attributes, size3, tid, worldToLocal);
    #endif
    }
    #if VFX_COMPUTE_AABBS
            
            float3 size3 = float3(attributes.size,attributes.size,attributes.size);
            
            float3 rtScale = float3(1,1,1);
            #if VFX_USE_RT_CUSTOM_SCALE
                
                rtScale = float3(rayTracedScaling, 1.0f);
            #else
                #ifdef VFX_RT_DEFAULT_SCALE
                    rtScale = VFX_RT_DEFAULT_SCALE;
                #endif
            #endif
            
            size3 *= rtScale;
            #if VFX_USE_SCALEX_CURRENT
            size3.x *= attributes.scaleX;
            #endif
            #if VFX_USE_SCALEY_CURRENT
            size3.y *= attributes.scaleY;
            #endif
            #if VFX_USE_SCALEZ_CURRENT
            size3.z *= attributes.scaleZ;
            #endif
            
            int rayTracingDecimationFactor = VFX_RT_DECIMATION_FACTOR;
            FillAabbBuffer(attributes, size3, index, instanceIndex, rayTracingDecimationFactor);
    #endif
#endif
	}
	#if VFX_COMPUTE_BOUNDS
	PerformBoundsReduction(index, tid, instanceIndex, nbMax);
	#endif
}
