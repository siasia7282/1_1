//[lighting line] [System (2)] Initialize Particle,2
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 metal vulkan xboxone xboxone xboxseries playstation ps5


#pragma enable_d3d11_debug_symbols

#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_SEED_CURRENT 1
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_RATECOUNT_C_CURRENT 1
#define VFX_USE_PARTICLEID_CURRENT 1
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_OLDPOSITION_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define VFX_USE_STRIPALIVE_CURRENT 1
#define RAW_CAPACITY 30000u
#define VFX_STATIC_SOURCE_COUNT (1)
#define VFX_LOCAL_SPACE 1
#include_with_pragmas "Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_VARIABLE_SIZE 1
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1



struct GraphValues
{
    bool _vfx_enabled_a;
    float3 _Position_a;
    bool _vfx_enabled_b;
    float3 A_a;
    float3 B_a;
    bool _vfx_enabled_c;
    float _Lifetime_a;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    float3 position;
    uint seed;
    float lifetime;
    float3 velocity;
    float rateCount_c;
    uint particleId;
    bool alive;
    float3 oldPosition;
    float age;
    bool stripAlive;
};

struct VFXSourceAttributes
{
};



























// Strips tangent computation
















#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)
#define instancingPrefixSumOffset 0

RWByteAddressBuffer attributeBuffer;
ByteAddressBuffer sourceAttributeBuffer;


#if !VFX_USE_SPAWNER_FROM_GPU
    StructuredBuffer<uint> spawnBuffer;
    #define EVENT_PREFIX_SUM(index)         spawnBuffer[index]
    #define SPAWNCOUNT_PREFIX_SUM_OFFSET    instancingActiveCount
#endif


CBUFFER_START(initParamsConst)
    uint dispatchWidth;
    
    float4 instancingConstants;
    uint2 instancingBufferOffsets;
    
CBUFFER_END

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadList;
#endif

#if VFX_USE_SPAWNER_FROM_GPU
StructuredBuffer<uint> eventList;
#endif

#if HAS_STRIPS_DATA
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"



void SetAttribute_CAC29747(inout float3 position, float3 _Position) /*channels:XYZ */
{
    position = _Position;
}
void SetAttribute_C707D7BF(inout float3 position, inout uint seed, float3 A, float3 B) /*channels:XYZ */
{
    position += lerp(A,B,RAND3);
}
void SetAttribute_F0142CB9(inout float lifetime, float _Lifetime) /*channels:XYZ */
{
    lifetime = _Lifetime;
}



#if HAS_STRIPS
bool GetParticleIndex(inout uint particleIndex, uint stripIndex, uint instanceIndex)
{
    uint relativeIndex;
    uint bufferIndex = STRIP_DATA_INDEX(instanceIndex, stripIndex);

    InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), 1, relativeIndex);
    bool isFull = relativeIndex >= PARTICLE_PER_STRIP_COUNT;
    if (isFull)
    {
        InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), -1); // Remove previous increment
    }
    else
    {
        particleIndex = stripIndex * PARTICLE_PER_STRIP_COUNT + ((STRIP_DATA(STRIP_FIRST_INDEX, bufferIndex) + relativeIndex) % PARTICLE_PER_STRIP_COUNT);
    }

    return !isFull;
}
#endif

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
    uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;
#if !VFX_USE_SPAWNER_FROM_GPU
    id += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
#endif
    
    uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
    #if defined(VFX_INSTANCING_FIXED_SIZE)
    	uint index = GetThreadId(groupId, 0, dispatchWidth);
    	index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
    	index += groupThreadId.x;
    #else
    	uint index = VFXInitInstancing(id, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
    #endif
    
    

	struct ContextData
	{
	    uint maxParticleCount;
	    uint systemSeed;
	    uint initSpawnIndex;
	};
	ContextData contextData;
	uint4 rawContextData = graphValuesBuffer.Load4(instanceActiveIndex * 240);
	contextData.maxParticleCount = rawContextData.x;
	contextData.systemSeed = rawContextData.y;
	contextData.initSpawnIndex = rawContextData.z;
	

	uint systemSeed = contextData.systemSeed;

    GraphValues graphValues;
    
    graphValues._Position_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 240  + 16));
    graphValues._vfx_enabled_a = (bool)graphValuesBuffer.Load(instanceActiveIndex * 240  + 28);
    graphValues.A_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 240  + 32));
    graphValues._vfx_enabled_b = (bool)graphValuesBuffer.Load(instanceActiveIndex * 240  + 44);
    graphValues.B_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 240  + 48));
    graphValues._vfx_enabled_c = (bool)graphValuesBuffer.Load(instanceActiveIndex * 240  + 60);
    graphValues._Lifetime_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 240  + 76));
    


#if VFX_USE_SPAWNER_FROM_GPU
    uint elementCount = eventList[VFXGetEventListBufferElementCount(instanceActiveIndex)];
    uint totalAccumulatedElementCount = eventList[VFXGetEventListBufferAccumulatedCount(instanceActiveIndex)];
    uint maxThreadId = min(contextData.maxParticleCount, elementCount);
    uint currentSpawnIndex = totalAccumulatedElementCount - elementCount;
#else
    uint nbEvents = EVENT_PREFIX_SUM(instanceActiveIndex);
    [branch]
    if (instanceActiveIndex > 0u)
    {
        nbEvents -= EVENT_PREFIX_SUM(instanceActiveIndex - 1);
    }

    uint maxThreadId = instancingPrefixSum[instancingPrefixSumOffset + instanceCurrentIndex];
    [branch]
    if (instanceCurrentIndex > instancingCurrentOffset)
    {
        maxThreadId -= instancingPrefixSum[instancingPrefixSumOffset + instanceCurrentIndex - 1];
    }
    uint currentSpawnIndex = contextData.initSpawnIndex;
#endif

#if USE_DEAD_LIST
    maxThreadId = min(maxThreadId, deadList[DEAD_LIST_COUNT_COPY_OFFSET + instanceIndex]);
#endif

    if (index < maxThreadId)
    {
#if VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = eventList[VFXGetEventListBufferIndex(id, instanceActiveIndex)];
#endif

        uint startEventIndex = 0u; //tmp for GPU Events
#if !VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = 0;

        startEventIndex = 0;
        [branch]
        if (instanceActiveIndex > 0u)
        {
            startEventIndex = EVENT_PREFIX_SUM(instanceActiveIndex - 1);
        }
        uint sourceSearchBegin = startEventIndex + SPAWNCOUNT_PREFIX_SUM_OFFSET;
        uint sourceSearchEnd = sourceSearchBegin + nbEvents;
        sourceIndex = BinarySearchPrefixSum(index, spawnBuffer, sourceSearchBegin, sourceSearchEnd) - sourceSearchBegin;

#endif

		VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

        attributes.position = float3(0, 0, 0);
        attributes.seed = (uint)0;
        attributes.lifetime = (float)1;
        attributes.velocity = float3(0, 0, 0);
        attributes.rateCount_c = (float)0;
        attributes.particleId = (uint)0;
        attributes.alive = (bool)true;
        attributes.oldPosition = float3(0, 0, 0);
        attributes.age = (float)0;
        attributes.stripAlive = (bool)true;
        


		uint particleIndex = index + currentSpawnIndex;
#if VFX_USE_PARTICLEID_CURRENT
         attributes.particleId = particleIndex;
#endif
#if VFX_USE_SEED_CURRENT
        attributes.seed = WangHash(particleIndex ^ systemSeed);
#endif
#if VFX_USE_SPAWNINDEX_CURRENT
        attributes.spawnIndex = index;
#endif

#if VFX_USE_SPAWNER_FROM_GPU && VFX_USE_SPAWNCOUNT_SOURCE
    //Fix previously incorrectly read or initialized source spawnCount
    sourceAttributes.spawnCount = (float)elementCount;
#endif

#if HAS_STRIPS
#if !VFX_USE_SPAWNER_FROM_GPU
		
#else
        uint stripIndex = sourceIndex;
#endif
		stripIndex = min(stripIndex, STRIP_COUNT);

        if (!GetParticleIndex(particleIndex, stripIndex, instanceIndex))
            return;

        const StripData stripData = GetStripDataFromStripIndex(stripIndex, instanceIndex);
		InitStripAttributesWithSpawn(maxThreadId, particleIndex, attributes, stripData);
		// TODO Change seed to be sure we're deterministic on random with strip
#endif

        if (graphValues._vfx_enabled_a)
        {
            SetAttribute_CAC29747( /*inout */attributes.position, graphValues._Position_a);
        }
        if (graphValues._vfx_enabled_b)
        {
            SetAttribute_C707D7BF( /*inout */attributes.position,  /*inout */attributes.seed, graphValues.A_a, graphValues.B_a);
        }
        if (graphValues._vfx_enabled_c)
        {
            SetAttribute_F0142CB9( /*inout */attributes.lifetime, graphValues._Lifetime_a);
        }
        


#if VFX_USE_ALIVE_CURRENT
        if (attributes.alive)
#endif
        {
#if USE_DEAD_LIST
            uint deadIndex;
            InterlockedAdd(deadList[instanceIndex], -1, deadIndex);
            deadIndex -= 1;
            deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
            uint index = deadList[deadIndex];
#else
            uint index = particleIndex;
#endif
            attributeBuffer.Store3(((instanceIndex * 0x7C940) + (index * 0x4 + 0x0)) << 2,asuint(attributes.position));
            attributeBuffer.Store(((instanceIndex * 0x7C940) + (index * 0x8 + 0x1D503)) << 2,asuint(attributes.lifetime));
            attributeBuffer.Store3(((instanceIndex * 0x7C940) + (index * 0x8 + 0x1D500)) << 2,asuint(attributes.velocity));
            attributeBuffer.Store(((instanceIndex * 0x7C940) + (index * 0x8 + 0x1D504)) << 2,asuint(attributes.rateCount_c));
            attributeBuffer.Store(((instanceIndex * 0x7C940) + (index * 0x1 + 0x57F00)) << 2,asuint(attributes.particleId));
            attributeBuffer.Store(((instanceIndex * 0x7C940) + (index * 0x4 + 0x3)) << 2,uint(attributes.alive));
            attributeBuffer.Store3(((instanceIndex * 0x7C940) + (index * 0x4 + 0x5F440)) << 2,asuint(attributes.oldPosition));
            attributeBuffer.Store(((instanceIndex * 0x7C940) + (index * 0x8 + 0x1D505)) << 2,asuint(attributes.age));
            attributeBuffer.Store(((instanceIndex * 0x7C940) + (index * 0x8 + 0x1D506)) << 2,uint(attributes.stripAlive));
            

        }
    }
}
