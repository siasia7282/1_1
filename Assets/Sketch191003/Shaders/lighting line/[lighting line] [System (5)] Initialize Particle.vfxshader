//[lighting line] [System (5)] Initialize Particle,6
//Don't delete the previous line or this one
#pragma kernel CSMain
#pragma only_renderers d3d11 metal vulkan xboxone xboxone xboxseries playstation ps5


#pragma enable_d3d11_debug_symbols

#define NB_THREADS_PER_GROUP 64
#define HAS_VFX_ATTRIBUTES 1
#define VFX_PASSDEPTH_ACTUAL (0)
#define VFX_PASSDEPTH_MOTION_VECTOR (1)
#define VFX_PASSDEPTH_SELECTION (2)
#define VFX_PASSDEPTH_PICKING (3)
#define VFX_PASSDEPTH_SHADOW (4)
#define VFX_USE_ALIVE_CURRENT 1
#define VFX_USE_POSITION_CURRENT 1
#define VFX_USE_LIFETIME_CURRENT 1
#define VFX_USE_SEED_CURRENT 1
#define VFX_USE_ANGLEX_CURRENT 1
#define VFX_USE_ANGLEY_CURRENT 1
#define VFX_USE_ANGLEZ_CURRENT 1
#define VFX_USE_ANGULARVELOCITYX_CURRENT 1
#define VFX_USE_ANGULARVELOCITYY_CURRENT 1
#define VFX_USE_ANGULARVELOCITYZ_CURRENT 1
#define VFX_USE_SIZE_CURRENT 1
#define VFX_USE_VELOCITY_CURRENT 1
#define VFX_USE_PARTICLEID_CURRENT 1
#define VFX_USE_AGE_CURRENT 1
#define VFX_USE_POSITION_SOURCE 1
#define RAW_CAPACITY 200000u
#define VFX_USE_SPAWNER_FROM_GPU 1
#define VFX_STATIC_SOURCE_COUNT (0)
#define VFX_LOCAL_SPACE 1
#include_with_pragmas "Packages/com.unity.render-pipelines.high-definition/Runtime/VFXGraph/Shaders/VFXDefines.hlsl"
#define VFX_USE_GRAPH_VALUES 1
#define VFX_USE_INSTANCING 1
#define VFX_INSTANCING_VARIABLE_SIZE 1
#define VFX_INSTANCING_ACTIVE_INDIRECTION 1
#define VFX_INSTANCING_BATCH_INDIRECTION 1



struct GraphValues
{
    bool _vfx_enabled_a;
    bool _Alive_a;
    bool _vfx_enabled_b;
    bool _vfx_enabled_c;
    float A_a;
    float B_a;
    bool _vfx_enabled_d;
    float3 A_b;
    float3 B_b;
    bool _vfx_enabled_e;
    float3 A_c;
    float3 B_c;
    bool _vfx_enabled_f;
    float A_d;
    float B_d;
    bool _vfx_enabled_g;
    float3 uniform_a;
    bool _vfx_enabled_h;
    float uniform_b;
    uint uniform_c;
    float uniform_d;
};
ByteAddressBuffer graphValuesBuffer;



struct VFXAttributes
{
    bool alive;
    float3 position;
    float lifetime;
    uint seed;
    float angleX;
    float angleY;
    float angleZ;
    float angularVelocityX;
    float angularVelocityY;
    float angularVelocityZ;
    float size;
    float3 velocity;
    uint particleId;
    float age;
};

struct VFXSourceAttributes
{
    float3 position;
};



























// Strips tangent computation
















#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)
#define instancingPrefixSumOffset 0

RWByteAddressBuffer attributeBuffer;
ByteAddressBuffer sourceAttributeBuffer;


#if !VFX_USE_SPAWNER_FROM_GPU
    StructuredBuffer<uint> spawnBuffer;
    #define EVENT_PREFIX_SUM(index)         spawnBuffer[index]
    #define SPAWNCOUNT_PREFIX_SUM_OFFSET    instancingActiveCount
#endif


CBUFFER_START(initParamsConst)
    uint dispatchWidth;
    
    float4 instancingConstants;
    uint2 instancingBufferOffsets;
    
CBUFFER_END

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadList;
#endif

#if VFX_USE_SPAWNER_FROM_GPU
StructuredBuffer<uint> eventList;
#endif

#if HAS_STRIPS_DATA
RWStructuredBuffer<uint> stripDataBuffer;
#endif

#include "Packages/com.unity.visualeffectgraph/Shaders/Common/VFXCommonCompute.hlsl"
#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommon.hlsl"



void SetAttribute_ED2BDC15(inout bool alive, bool _Alive) /*channels:XYZ */
{
    alive = _Alive;
}
void SetAttribute_CAC02F9E(inout float3 position, float3 Value) /*channels:XYZ */
{
    position = Value;
}
void SetAttribute_F01429A3(inout float lifetime, inout uint seed, float A, float B) /*channels:XYZ */
{
    lifetime = lerp(A,B,RAND);
}
void SetAttribute_48A7BD6A(inout float angleX, inout float angleY, inout float angleZ, inout uint seed, float3 A, float3 B) /*channels:XYZ */
{
    angleX = lerp(A.x,B.x,RAND);
    angleY = lerp(A.y,B.y,RAND);
    angleZ = lerp(A.z,B.z,RAND);
}
void SetAttribute_FA958722(inout float angularVelocityX, inout float angularVelocityY, inout float angularVelocityZ, inout uint seed, float3 A, float3 B) /*channels:XYZ */
{
    angularVelocityX = lerp(A.x,B.x,RAND);
    angularVelocityY = lerp(A.y,B.y,RAND);
    angularVelocityZ = lerp(A.z,B.z,RAND);
}
void SetAttribute_3278B545(inout float size, inout uint seed, float A, float B) /*channels:XYZ */
{
    size = lerp(A,B,RAND);
}
void SetAttribute_E629755(inout float3 velocity, float3 _Velocity) /*channels:XYZ */
{
    velocity = _Velocity;
}
void SetAttribute_6ED152F(inout float3 velocity, float3 _Velocity) /*channels:XYZ */
{
    velocity *= _Velocity;
}



#if HAS_STRIPS
bool GetParticleIndex(inout uint particleIndex, uint stripIndex, uint instanceIndex)
{
    uint relativeIndex;
    uint bufferIndex = STRIP_DATA_INDEX(instanceIndex, stripIndex);

    InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), 1, relativeIndex);
    bool isFull = relativeIndex >= PARTICLE_PER_STRIP_COUNT;
    if (isFull)
    {
        InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX, bufferIndex), -1); // Remove previous increment
    }
    else
    {
        particleIndex = stripIndex * PARTICLE_PER_STRIP_COUNT + ((STRIP_DATA(STRIP_FIRST_INDEX, bufferIndex) + relativeIndex) % PARTICLE_PER_STRIP_COUNT);
    }

    return !isFull;
}
#endif

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
    uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;
#if !VFX_USE_SPAWNER_FROM_GPU
    id += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
#endif
    
    uint instanceIndex, instanceActiveIndex, instanceCurrentIndex;
    #if defined(VFX_INSTANCING_FIXED_SIZE)
    	uint index = GetThreadId(groupId, 0, dispatchWidth);
    	index = VFXInitInstancing(index, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
    	index += groupThreadId.x;
    #else
    	uint index = VFXInitInstancing(id, instanceIndex, instanceActiveIndex, instanceCurrentIndex);
    #endif
    
    

	struct ContextData
	{
	    uint maxParticleCount;
	    uint systemSeed;
	    uint initSpawnIndex;
	};
	ContextData contextData;
	uint4 rawContextData = graphValuesBuffer.Load4(instanceActiveIndex * 528);
	contextData.maxParticleCount = rawContextData.x;
	contextData.systemSeed = rawContextData.y;
	contextData.initSpawnIndex = rawContextData.z;
	

	uint systemSeed = contextData.systemSeed;

    GraphValues graphValues;
    
    graphValues.A_b = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 528  + 288));
    graphValues._vfx_enabled_a = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 300);
    graphValues.B_b = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 528  + 304));
    graphValues._Alive_a = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 316);
    graphValues.A_c = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 528  + 320));
    graphValues._vfx_enabled_b = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 332);
    graphValues.B_c = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 528  + 336));
    graphValues._vfx_enabled_c = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 348);
    graphValues.uniform_a = asfloat(graphValuesBuffer.Load3(instanceActiveIndex * 528  + 352));
    graphValues.A_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 528  + 364));
    graphValues.B_a = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 528  + 380));
    graphValues._vfx_enabled_d = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 396);
    graphValues._vfx_enabled_e = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 412);
    graphValues._vfx_enabled_f = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 416);
    graphValues.A_d = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 528  + 420));
    graphValues.B_d = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 528  + 424));
    graphValues._vfx_enabled_g = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 428);
    graphValues._vfx_enabled_h = (bool)graphValuesBuffer.Load(instanceActiveIndex * 528  + 432);
    graphValues.uniform_b = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 528  + 436));
    graphValues.uniform_c = graphValuesBuffer.Load(instanceActiveIndex * 528  + 440);
    graphValues.uniform_d = asfloat(graphValuesBuffer.Load(instanceActiveIndex * 528  + 444));
    


#if VFX_USE_SPAWNER_FROM_GPU
    uint elementCount = eventList[VFXGetEventListBufferElementCount(instanceActiveIndex)];
    uint totalAccumulatedElementCount = eventList[VFXGetEventListBufferAccumulatedCount(instanceActiveIndex)];
    uint maxThreadId = min(contextData.maxParticleCount, elementCount);
    uint currentSpawnIndex = totalAccumulatedElementCount - elementCount;
#else
    uint nbEvents = EVENT_PREFIX_SUM(instanceActiveIndex);
    [branch]
    if (instanceActiveIndex > 0u)
    {
        nbEvents -= EVENT_PREFIX_SUM(instanceActiveIndex - 1);
    }

    uint maxThreadId = instancingPrefixSum[instancingPrefixSumOffset + instanceCurrentIndex];
    [branch]
    if (instanceCurrentIndex > instancingCurrentOffset)
    {
        maxThreadId -= instancingPrefixSum[instancingPrefixSumOffset + instanceCurrentIndex - 1];
    }
    uint currentSpawnIndex = contextData.initSpawnIndex;
#endif

#if USE_DEAD_LIST
    maxThreadId = min(maxThreadId, deadList[DEAD_LIST_COUNT_COPY_OFFSET + instanceIndex]);
#endif

    if (index < maxThreadId)
    {
#if VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = eventList[VFXGetEventListBufferIndex(id, instanceActiveIndex)];
#endif

        uint startEventIndex = 0u; //tmp for GPU Events
#if !VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = 0;

        startEventIndex = 0;
        [branch]
        if (instanceActiveIndex > 0u)
        {
            startEventIndex = EVENT_PREFIX_SUM(instanceActiveIndex - 1);
        }
        uint sourceSearchBegin = startEventIndex + SPAWNCOUNT_PREFIX_SUM_OFFSET;
        uint sourceSearchEnd = sourceSearchBegin + nbEvents;
        sourceIndex = BinarySearchPrefixSum(index, spawnBuffer, sourceSearchBegin, sourceSearchEnd) - sourceSearchBegin;

#endif

		VFXAttributes attributes = (VFXAttributes)0;
		VFXSourceAttributes sourceAttributes = (VFXSourceAttributes)0;

        attributes.alive = (bool)true;
        attributes.position = float3(0, 0, 0);
        attributes.lifetime = (float)1;
        attributes.seed = (uint)0;
        attributes.angleX = (float)0;
        attributes.angleY = (float)0;
        attributes.angleZ = (float)0;
        attributes.angularVelocityX = (float)0;
        attributes.angularVelocityY = (float)0;
        attributes.angularVelocityZ = (float)0;
        attributes.size = (float)0.100000001;
        attributes.velocity = float3(0, 0, 0);
        attributes.particleId = (uint)0;
        attributes.age = (float)0;
        sourceAttributes.position = asfloat(sourceAttributeBuffer.Load3(((startEventIndex * 0x1) + (sourceIndex * 0x8 + 0xDBBA00)) << 2));
        


		uint particleIndex = index + currentSpawnIndex;
#if VFX_USE_PARTICLEID_CURRENT
         attributes.particleId = particleIndex;
#endif
#if VFX_USE_SEED_CURRENT
        attributes.seed = WangHash(particleIndex ^ systemSeed);
#endif
#if VFX_USE_SPAWNINDEX_CURRENT
        attributes.spawnIndex = index;
#endif

#if VFX_USE_SPAWNER_FROM_GPU && VFX_USE_SPAWNCOUNT_SOURCE
    //Fix previously incorrectly read or initialized source spawnCount
    sourceAttributes.spawnCount = (float)elementCount;
#endif

#if HAS_STRIPS
#if !VFX_USE_SPAWNER_FROM_GPU
		
#else
        uint stripIndex = sourceIndex;
#endif
		stripIndex = min(stripIndex, STRIP_COUNT);

        if (!GetParticleIndex(particleIndex, stripIndex, instanceIndex))
            return;

        const StripData stripData = GetStripDataFromStripIndex(stripIndex, instanceIndex);
		InitStripAttributesWithSpawn(maxThreadId, particleIndex, attributes, stripData);
		// TODO Change seed to be sure we're deterministic on random with strip
#endif

        if (graphValues._vfx_enabled_a)
        {
            SetAttribute_ED2BDC15( /*inout */attributes.alive, graphValues._Alive_a);
        }
        if (graphValues._vfx_enabled_b)
        {
            float3 tmp_bv = sourceAttributes.position;
            SetAttribute_CAC02F9E( /*inout */attributes.position, tmp_bv);
        }
        if (graphValues._vfx_enabled_c)
        {
            SetAttribute_F01429A3( /*inout */attributes.lifetime,  /*inout */attributes.seed, graphValues.A_a, graphValues.B_a);
        }
        if (graphValues._vfx_enabled_d)
        {
            SetAttribute_48A7BD6A( /*inout */attributes.angleX,  /*inout */attributes.angleY,  /*inout */attributes.angleZ,  /*inout */attributes.seed, graphValues.A_b, graphValues.B_b);
        }
        if (graphValues._vfx_enabled_e)
        {
            SetAttribute_FA958722( /*inout */attributes.angularVelocityX,  /*inout */attributes.angularVelocityY,  /*inout */attributes.angularVelocityZ,  /*inout */attributes.seed, graphValues.A_c, graphValues.B_c);
        }
        if (graphValues._vfx_enabled_f)
        {
            SetAttribute_3278B545( /*inout */attributes.size,  /*inout */attributes.seed, graphValues.A_d, graphValues.B_d);
        }
        if (graphValues._vfx_enabled_g)
        {
            float3 tmp_bv = attributes.position - graphValues.uniform_a;
            float3 tmp_bx = tmp_bv * tmp_bv;
            float tmp_by = tmp_bx[2];
            float tmp_bz = tmp_bx[1];
            float tmp_ca = tmp_by + tmp_bz;
            float tmp_cb = tmp_bx[0];
            float tmp_cc = tmp_ca + tmp_cb;
            float tmp_ce = pow(tmp_cc, (float)0.5);
            float tmp_cf = (float)1 / tmp_ce;
            float3 tmp_cg = float3(tmp_cf, tmp_cf, tmp_cf);
            float3 tmp_ch = tmp_bv * tmp_cg;
            SetAttribute_E629755( /*inout */attributes.velocity, tmp_ch);
        }
        if (graphValues._vfx_enabled_h)
        {
            uint tmp_bv = attributes.particleId ^ graphValues.uniform_c;
            float tmp_bw = FixedRand(tmp_bv);
            float tmp_bx = tmp_bw * graphValues.uniform_d;
            float tmp_by = graphValues.uniform_b + tmp_bx;
            float3 tmp_bz = float3(tmp_by, tmp_by, tmp_by);
            SetAttribute_6ED152F( /*inout */attributes.velocity, tmp_bz);
        }
        


#if VFX_USE_ALIVE_CURRENT
        if (attributes.alive)
#endif
        {
#if USE_DEAD_LIST
            uint deadIndex;
            InterlockedAdd(deadList[instanceIndex], -1, deadIndex);
            deadIndex -= 1;
            deadIndex += DEAD_LIST_OFFSET + instanceIndex * RAW_CAPACITY;
            uint index = deadList[deadIndex];
#else
            uint index = particleIndex;
#endif
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x8 + 0x3)) << 2,uint(attributes.alive));
            attributeBuffer.Store3(((instanceIndex * 0x33E140) + (index * 0x8 + 0x0)) << 2,asuint(attributes.position));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x1 + 0x186A00)) << 2,asuint(attributes.lifetime));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x8 + 0x4)) << 2,asuint(attributes.angleX));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x8 + 0x5)) << 2,asuint(attributes.angleY));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x8 + 0x6)) << 2,asuint(attributes.angleZ));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x3 + 0x1B7740)) << 2,asuint(attributes.angularVelocityX));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x3 + 0x1B7741)) << 2,asuint(attributes.angularVelocityY));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x3 + 0x1B7742)) << 2,asuint(attributes.angularVelocityZ));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x1 + 0x249F00)) << 2,asuint(attributes.size));
            attributeBuffer.Store3(((instanceIndex * 0x33E140) + (index * 0x4 + 0x27AC40)) << 2,asuint(attributes.velocity));
            attributeBuffer.Store(((instanceIndex * 0x33E140) + (index * 0x8 + 0x7)) << 2,asuint(attributes.age));
            

        }
    }
}
